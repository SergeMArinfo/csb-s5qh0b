{"version":3,"sources":["star-element.js","index.js"],"names":["unstable_registerShapeModel","type","radius","fill","numPoints","StarElement","observer","_ref","element","ref","store","React","useRef","handleChange","e","node","currentTarget","scaleX","scaleY","set","x","y","rotation","target","react_default","a","createElement","ReactKonva","name","id","offsetX","offsetY","opacity","draggable","locked","outerRadius","innerRadius","onDragMove","onTransform","unstable_registerShapeComponent","unstable_registerTransformerAttrs","enabledAnchors","LineToolbar","_ref2","selectedElements","components","Group","align","Alignment","LEFT","color_picker_default","value","onChange","onValueChange","val","style","width","marginLeft","min","max","unstable_registerToolbarComponent","createDemoApp","container","document","getElementById","key","showCredit","pages","addElement","height"],"mappings":"qPAmBAA,sCAA4B,CAC1BC,KAAM,OACNC,OAAQ,IACRC,KAAM,QACNC,UAAW,IAIN,IAAMC,EAAcC,mBAAS,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,QAC/BC,GADoDF,EAAZG,MAClCC,IAAMC,OAAO,OAEnBC,EAAe,SAACC,GACpB,IAAMC,EAAOD,EAAEE,cACTC,EAASF,EAAKE,SAGpBF,EAAKE,OAAO,GACZF,EAAKG,OAAO,GAEZV,EAAQW,IAAI,CACVC,EAAGL,EAAKK,IACRC,EAAGN,EAAKM,IACRC,SAAUR,EAAES,OAAOD,WACnBpB,OAAQM,EAAQN,OAASe,KAO7B,OACEO,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACElB,IAAKA,EAELmB,KAAK,UAGLC,GAAIrB,EAAQqB,GACZT,EAAGZ,EAAQY,EACXC,EAAGb,EAAQa,EACXlB,KAAMK,EAAQL,KACd2B,SAAUtB,EAAQN,OAClB6B,SAAUvB,EAAQN,OAClBoB,SAAUd,EAAQc,SAClBU,QAASxB,EAAQwB,QACjBC,WAAYzB,EAAQ0B,OACpBC,YAAa3B,EAAQN,OACrBkC,YAA8B,GAAjB5B,EAAQN,OACrBmC,WAAYxB,EACZyB,YAAazB,MAMnB0B,0CAAgC,OAAQlC,GAExCmC,4CAAkC,OAAQ,CACxCC,eAAgB,CAAC,WAAY,YAAa,cAAe,kBAI3D,IAAMC,EAAcpC,mBAAS,SAAAqC,GAAe,IAAZjC,EAAYiC,EAAZjC,MACxBF,EAAUE,EAAMkC,iBAAiB,GAEvC,OACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAOC,MAAR,CAAcC,MAAOC,IAAUC,MAC7BzB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CACE0B,MAAO3C,EAAQL,KACfiD,SAAU,SAACjD,GAAD,OACRK,EAAQW,IAAI,CACVhB,UAGJO,MAAOA,IAETc,EAAAC,EAAAC,cAACmB,EAAA,GAAD,CACEQ,cAAe,SAACC,GACd9C,EAAQW,IAAI,CAAEjB,OAAQoD,KAExBH,MAAO3C,EAAQN,OACfqD,MAAO,CAAEC,MAAO,OAAQC,WAAY,QACpCC,IAAK,EACLC,IAAK,SAMbC,4CAAkC,OAAQlB,GCrG1C,IAAQhC,EAAUmD,wBAAc,CAC9BC,UAAWC,SAASC,eAAe,QAInCC,IAAK,uBAGLC,YAAY,IARNxD,MAWRA,EAAMyD,MAAM,GAAGC,WAAW,CAAEnE,KAAM,OAAQC,OAAQ,IAAKC,KAAM,QAE7DO,EAAMyD,MAAM,GAAGC,WAAW,CACxBhD,EAAGV,EAAM8C,MAAQ,IACjBnC,EAAGX,EAAM2D,OAAS,IAClBpE,KAAM,OACNC,OAAQ,IACRC,KAAM","file":"static/js/main.dd7c05f2.chunk.js","sourcesContent":["import React from 'react';\n// polotno is made with mobx library\n// we will need its tools to make reactive components\nimport { observer } from 'mobx-react-lite';\n// import Konva components\nimport { Star } from 'react-konva';\n\n// import toolbar components\nimport { NumericInput, Navbar, Alignment } from '@blueprintjs/core';\nimport ColorPicker from 'polotno/toolbar/color-picker';\n\n// import Polotno API methods\nimport { unstable_registerShapeComponent } from 'polotno/config';\nimport { unstable_registerToolbarComponent } from 'polotno/config';\nimport { unstable_registerShapeModel } from 'polotno/config';\nimport { unstable_registerTransformerAttrs } from 'polotno/config';\n\n// define our model\n// we need to provide all default values\nunstable_registerShapeModel({\n  type: 'star',\n  radius: 100,\n  fill: 'black',\n  numPoints: 6,\n});\n\n// now we need to define how elements looks on canvas\nexport const StarElement = observer(({ element, store }) => {\n  const ref = React.useRef(null);\n\n  const handleChange = (e) => {\n    const node = e.currentTarget;\n    const scaleX = node.scaleX();\n    // Konva.Transformer is changing scale by default\n    // we don't need that, so we reset it back to 1.\n    node.scaleX(1);\n    node.scaleY(1);\n    // and then save all changes back to the model\n    element.set({\n      x: node.x(),\n      y: node.y(),\n      rotation: e.target.rotation(),\n      radius: element.radius * scaleX,\n    });\n  };\n\n  // VERY IMPORTANT note!\n  // element.x and element.y - must define top-left corner of the shape\n  // so all position attributes are consistent across all elements\n  return (\n    <Star\n      ref={ref}\n      // remember to use \"element\" name. Polotno will use it internally to find correct node\n      name=\"element\"\n      // also it is important to pass id\n      // so polotno can automatically do selection\n      id={element.id}\n      x={element.x}\n      y={element.y}\n      fill={element.fill}\n      offsetX={-element.radius}\n      offsetY={-element.radius}\n      rotation={element.rotation}\n      opacity={element.opacity}\n      draggable={!element.locked}\n      outerRadius={element.radius}\n      innerRadius={element.radius * 0.5}\n      onDragMove={handleChange}\n      onTransform={handleChange}\n    />\n  );\n});\n\n// now we can register canvas component\nunstable_registerShapeComponent('star', StarElement);\n// and change default transformer a bit\nunstable_registerTransformerAttrs('star', {\n  enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],\n});\n\n// now we can define custom toolbar\nconst LineToolbar = observer(({ store }) => {\n  const element = store.selectedElements[0];\n\n  return (\n    <Navbar.Group align={Alignment.LEFT}>\n      <ColorPicker\n        value={element.fill}\n        onChange={(fill) =>\n          element.set({\n            fill,\n          })\n        }\n        store={store}\n      />\n      <NumericInput\n        onValueChange={(val) => {\n          element.set({ radius: val });\n        }}\n        value={element.radius}\n        style={{ width: '50px', marginLeft: '10px' }}\n        min={1}\n        max={500}\n      />\n    </Navbar.Group>\n  );\n});\n\nunstable_registerToolbarComponent('star', LineToolbar);\n","import { createDemoApp } from 'polotno/polotno-app';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/popover2/lib/css/blueprint-popover2.css';\n\nimport './star-element';\n\nconst { store } = createDemoApp({\n  container: document.getElementById('root'),\n  // this is a demo key just for that project\n  // (!) please don't use it in your projects\n  // to create your own API key please go here: https://polotno.com/cabinet\n  key: 'nFA5H9elEytDyPyvKL7T',\n  // you can hide back-link on a paid licence\n  // but it will be good if you can keep it for Polotno project support\n  showCredit: true,\n});\n\nstore.pages[0].addElement({ type: 'star', radius: 100, fill: 'red' });\n\nstore.pages[0].addElement({\n  x: store.width - 200,\n  y: store.height - 200,\n  type: 'star',\n  radius: 100,\n  fill: 'green',\n});\n"],"sourceRoot":""}